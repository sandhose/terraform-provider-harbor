// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/sandhose/terraform-provider-harbor/api/models"
)

// NewPostRepositoriesRepoNameLabelsParams creates a new PostRepositoriesRepoNameLabelsParams object
// with the default values initialized.
func NewPostRepositoriesRepoNameLabelsParams() *PostRepositoriesRepoNameLabelsParams {
	var ()
	return &PostRepositoriesRepoNameLabelsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostRepositoriesRepoNameLabelsParamsWithTimeout creates a new PostRepositoriesRepoNameLabelsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostRepositoriesRepoNameLabelsParamsWithTimeout(timeout time.Duration) *PostRepositoriesRepoNameLabelsParams {
	var ()
	return &PostRepositoriesRepoNameLabelsParams{

		timeout: timeout,
	}
}

// NewPostRepositoriesRepoNameLabelsParamsWithContext creates a new PostRepositoriesRepoNameLabelsParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostRepositoriesRepoNameLabelsParamsWithContext(ctx context.Context) *PostRepositoriesRepoNameLabelsParams {
	var ()
	return &PostRepositoriesRepoNameLabelsParams{

		Context: ctx,
	}
}

// NewPostRepositoriesRepoNameLabelsParamsWithHTTPClient creates a new PostRepositoriesRepoNameLabelsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostRepositoriesRepoNameLabelsParamsWithHTTPClient(client *http.Client) *PostRepositoriesRepoNameLabelsParams {
	var ()
	return &PostRepositoriesRepoNameLabelsParams{
		HTTPClient: client,
	}
}

/*PostRepositoriesRepoNameLabelsParams contains all the parameters to send to the API endpoint
for the post repositories repo name labels operation typically these are written to a http.Request
*/
type PostRepositoriesRepoNameLabelsParams struct {

	/*Label
	  Only the ID property is required.

	*/
	Label *models.Label
	/*RepoName
	  The name of repository.

	*/
	RepoName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post repositories repo name labels params
func (o *PostRepositoriesRepoNameLabelsParams) WithTimeout(timeout time.Duration) *PostRepositoriesRepoNameLabelsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post repositories repo name labels params
func (o *PostRepositoriesRepoNameLabelsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post repositories repo name labels params
func (o *PostRepositoriesRepoNameLabelsParams) WithContext(ctx context.Context) *PostRepositoriesRepoNameLabelsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post repositories repo name labels params
func (o *PostRepositoriesRepoNameLabelsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post repositories repo name labels params
func (o *PostRepositoriesRepoNameLabelsParams) WithHTTPClient(client *http.Client) *PostRepositoriesRepoNameLabelsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post repositories repo name labels params
func (o *PostRepositoriesRepoNameLabelsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLabel adds the label to the post repositories repo name labels params
func (o *PostRepositoriesRepoNameLabelsParams) WithLabel(label *models.Label) *PostRepositoriesRepoNameLabelsParams {
	o.SetLabel(label)
	return o
}

// SetLabel adds the label to the post repositories repo name labels params
func (o *PostRepositoriesRepoNameLabelsParams) SetLabel(label *models.Label) {
	o.Label = label
}

// WithRepoName adds the repoName to the post repositories repo name labels params
func (o *PostRepositoriesRepoNameLabelsParams) WithRepoName(repoName string) *PostRepositoriesRepoNameLabelsParams {
	o.SetRepoName(repoName)
	return o
}

// SetRepoName adds the repoName to the post repositories repo name labels params
func (o *PostRepositoriesRepoNameLabelsParams) SetRepoName(repoName string) {
	o.RepoName = repoName
}

// WriteToRequest writes these params to a swagger request
func (o *PostRepositoriesRepoNameLabelsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Label != nil {
		if err := r.SetBodyParam(o.Label); err != nil {
			return err
		}
	}

	// path param repo_name
	if err := r.SetPathParam("repo_name", o.RepoName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
