// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// PostRepositoriesRepoNameTagsReader is a Reader for the PostRepositoriesRepoNameTags structure.
type PostRepositoriesRepoNameTagsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostRepositoriesRepoNameTagsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostRepositoriesRepoNameTagsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostRepositoriesRepoNameTagsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostRepositoriesRepoNameTagsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostRepositoriesRepoNameTagsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostRepositoriesRepoNameTagsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPostRepositoriesRepoNameTagsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostRepositoriesRepoNameTagsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostRepositoriesRepoNameTagsOK creates a PostRepositoriesRepoNameTagsOK with default headers values
func NewPostRepositoriesRepoNameTagsOK() *PostRepositoriesRepoNameTagsOK {
	return &PostRepositoriesRepoNameTagsOK{}
}

/*PostRepositoriesRepoNameTagsOK handles this case with default header values.

Image retag successfully.
*/
type PostRepositoriesRepoNameTagsOK struct {
}

func (o *PostRepositoriesRepoNameTagsOK) Error() string {
	return fmt.Sprintf("[POST /repositories/{repo_name}/tags][%d] postRepositoriesRepoNameTagsOK ", 200)
}

func (o *PostRepositoriesRepoNameTagsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostRepositoriesRepoNameTagsBadRequest creates a PostRepositoriesRepoNameTagsBadRequest with default headers values
func NewPostRepositoriesRepoNameTagsBadRequest() *PostRepositoriesRepoNameTagsBadRequest {
	return &PostRepositoriesRepoNameTagsBadRequest{}
}

/*PostRepositoriesRepoNameTagsBadRequest handles this case with default header values.

Invalid image values provided.
*/
type PostRepositoriesRepoNameTagsBadRequest struct {
}

func (o *PostRepositoriesRepoNameTagsBadRequest) Error() string {
	return fmt.Sprintf("[POST /repositories/{repo_name}/tags][%d] postRepositoriesRepoNameTagsBadRequest ", 400)
}

func (o *PostRepositoriesRepoNameTagsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostRepositoriesRepoNameTagsUnauthorized creates a PostRepositoriesRepoNameTagsUnauthorized with default headers values
func NewPostRepositoriesRepoNameTagsUnauthorized() *PostRepositoriesRepoNameTagsUnauthorized {
	return &PostRepositoriesRepoNameTagsUnauthorized{}
}

/*PostRepositoriesRepoNameTagsUnauthorized handles this case with default header values.

User has no permission to the source project or destination project.
*/
type PostRepositoriesRepoNameTagsUnauthorized struct {
}

func (o *PostRepositoriesRepoNameTagsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /repositories/{repo_name}/tags][%d] postRepositoriesRepoNameTagsUnauthorized ", 401)
}

func (o *PostRepositoriesRepoNameTagsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostRepositoriesRepoNameTagsForbidden creates a PostRepositoriesRepoNameTagsForbidden with default headers values
func NewPostRepositoriesRepoNameTagsForbidden() *PostRepositoriesRepoNameTagsForbidden {
	return &PostRepositoriesRepoNameTagsForbidden{}
}

/*PostRepositoriesRepoNameTagsForbidden handles this case with default header values.

Forbiden as quota exceeded.
*/
type PostRepositoriesRepoNameTagsForbidden struct {
}

func (o *PostRepositoriesRepoNameTagsForbidden) Error() string {
	return fmt.Sprintf("[POST /repositories/{repo_name}/tags][%d] postRepositoriesRepoNameTagsForbidden ", 403)
}

func (o *PostRepositoriesRepoNameTagsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostRepositoriesRepoNameTagsNotFound creates a PostRepositoriesRepoNameTagsNotFound with default headers values
func NewPostRepositoriesRepoNameTagsNotFound() *PostRepositoriesRepoNameTagsNotFound {
	return &PostRepositoriesRepoNameTagsNotFound{}
}

/*PostRepositoriesRepoNameTagsNotFound handles this case with default header values.

Project or repository not found.
*/
type PostRepositoriesRepoNameTagsNotFound struct {
}

func (o *PostRepositoriesRepoNameTagsNotFound) Error() string {
	return fmt.Sprintf("[POST /repositories/{repo_name}/tags][%d] postRepositoriesRepoNameTagsNotFound ", 404)
}

func (o *PostRepositoriesRepoNameTagsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostRepositoriesRepoNameTagsConflict creates a PostRepositoriesRepoNameTagsConflict with default headers values
func NewPostRepositoriesRepoNameTagsConflict() *PostRepositoriesRepoNameTagsConflict {
	return &PostRepositoriesRepoNameTagsConflict{}
}

/*PostRepositoriesRepoNameTagsConflict handles this case with default header values.

Target tag already exists.
*/
type PostRepositoriesRepoNameTagsConflict struct {
}

func (o *PostRepositoriesRepoNameTagsConflict) Error() string {
	return fmt.Sprintf("[POST /repositories/{repo_name}/tags][%d] postRepositoriesRepoNameTagsConflict ", 409)
}

func (o *PostRepositoriesRepoNameTagsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostRepositoriesRepoNameTagsInternalServerError creates a PostRepositoriesRepoNameTagsInternalServerError with default headers values
func NewPostRepositoriesRepoNameTagsInternalServerError() *PostRepositoriesRepoNameTagsInternalServerError {
	return &PostRepositoriesRepoNameTagsInternalServerError{}
}

/*PostRepositoriesRepoNameTagsInternalServerError handles this case with default header values.

Unexpected internal errors.
*/
type PostRepositoriesRepoNameTagsInternalServerError struct {
}

func (o *PostRepositoriesRepoNameTagsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /repositories/{repo_name}/tags][%d] postRepositoriesRepoNameTagsInternalServerError ", 500)
}

func (o *PostRepositoriesRepoNameTagsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
