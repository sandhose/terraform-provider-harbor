// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/sandhose/terraform-provider-harbor/api/models"
)

// GetRepositoriesReader is a Reader for the GetRepositories structure.
type GetRepositoriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepositoriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRepositoriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRepositoriesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRepositoriesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRepositoriesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRepositoriesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetRepositoriesOK creates a GetRepositoriesOK with default headers values
func NewGetRepositoriesOK() *GetRepositoriesOK {
	return &GetRepositoriesOK{}
}

/*GetRepositoriesOK handles this case with default header values.

Get repositories successfully.
*/
type GetRepositoriesOK struct {
	/*Link refers to the previous page and next page
	 */
	Link string
	/*The total count of repositories
	 */
	XTotalCount int64

	Payload []*models.Repository
}

func (o *GetRepositoriesOK) Error() string {
	return fmt.Sprintf("[GET /repositories][%d] getRepositoriesOK  %+v", 200, o.Payload)
}

func (o *GetRepositoriesOK) GetPayload() []*models.Repository {
	return o.Payload
}

func (o *GetRepositoriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Link
	o.Link = response.GetHeader("Link")

	// response header X-Total-Count
	xTotalCount, err := swag.ConvertInt64(response.GetHeader("X-Total-Count"))
	if err != nil {
		return errors.InvalidType("X-Total-Count", "header", "int64", response.GetHeader("X-Total-Count"))
	}
	o.XTotalCount = xTotalCount

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoriesBadRequest creates a GetRepositoriesBadRequest with default headers values
func NewGetRepositoriesBadRequest() *GetRepositoriesBadRequest {
	return &GetRepositoriesBadRequest{}
}

/*GetRepositoriesBadRequest handles this case with default header values.

Invalid project ID.
*/
type GetRepositoriesBadRequest struct {
}

func (o *GetRepositoriesBadRequest) Error() string {
	return fmt.Sprintf("[GET /repositories][%d] getRepositoriesBadRequest ", 400)
}

func (o *GetRepositoriesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRepositoriesForbidden creates a GetRepositoriesForbidden with default headers values
func NewGetRepositoriesForbidden() *GetRepositoriesForbidden {
	return &GetRepositoriesForbidden{}
}

/*GetRepositoriesForbidden handles this case with default header values.

Project is not public or current user is irrelevant to the repository.
*/
type GetRepositoriesForbidden struct {
}

func (o *GetRepositoriesForbidden) Error() string {
	return fmt.Sprintf("[GET /repositories][%d] getRepositoriesForbidden ", 403)
}

func (o *GetRepositoriesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRepositoriesNotFound creates a GetRepositoriesNotFound with default headers values
func NewGetRepositoriesNotFound() *GetRepositoriesNotFound {
	return &GetRepositoriesNotFound{}
}

/*GetRepositoriesNotFound handles this case with default header values.

Project ID does not exist.
*/
type GetRepositoriesNotFound struct {
}

func (o *GetRepositoriesNotFound) Error() string {
	return fmt.Sprintf("[GET /repositories][%d] getRepositoriesNotFound ", 404)
}

func (o *GetRepositoriesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRepositoriesInternalServerError creates a GetRepositoriesInternalServerError with default headers values
func NewGetRepositoriesInternalServerError() *GetRepositoriesInternalServerError {
	return &GetRepositoriesInternalServerError{}
}

/*GetRepositoriesInternalServerError handles this case with default header values.

Unexpected internal errors.
*/
type GetRepositoriesInternalServerError struct {
}

func (o *GetRepositoriesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /repositories][%d] getRepositoriesInternalServerError ", 500)
}

func (o *GetRepositoriesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
