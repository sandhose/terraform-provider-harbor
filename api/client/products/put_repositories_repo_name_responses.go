// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// PutRepositoriesRepoNameReader is a Reader for the PutRepositoriesRepoName structure.
type PutRepositoriesRepoNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRepositoriesRepoNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutRepositoriesRepoNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPutRepositoriesRepoNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRepositoriesRepoNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutRepositoriesRepoNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutRepositoriesRepoNameOK creates a PutRepositoriesRepoNameOK with default headers values
func NewPutRepositoriesRepoNameOK() *PutRepositoriesRepoNameOK {
	return &PutRepositoriesRepoNameOK{}
}

/*PutRepositoriesRepoNameOK handles this case with default header values.

Update successfully.
*/
type PutRepositoriesRepoNameOK struct {
}

func (o *PutRepositoriesRepoNameOK) Error() string {
	return fmt.Sprintf("[PUT /repositories/{repo_name}][%d] putRepositoriesRepoNameOK ", 200)
}

func (o *PutRepositoriesRepoNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRepoNameUnauthorized creates a PutRepositoriesRepoNameUnauthorized with default headers values
func NewPutRepositoriesRepoNameUnauthorized() *PutRepositoriesRepoNameUnauthorized {
	return &PutRepositoriesRepoNameUnauthorized{}
}

/*PutRepositoriesRepoNameUnauthorized handles this case with default header values.

Unauthorized.
*/
type PutRepositoriesRepoNameUnauthorized struct {
}

func (o *PutRepositoriesRepoNameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /repositories/{repo_name}][%d] putRepositoriesRepoNameUnauthorized ", 401)
}

func (o *PutRepositoriesRepoNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRepoNameForbidden creates a PutRepositoriesRepoNameForbidden with default headers values
func NewPutRepositoriesRepoNameForbidden() *PutRepositoriesRepoNameForbidden {
	return &PutRepositoriesRepoNameForbidden{}
}

/*PutRepositoriesRepoNameForbidden handles this case with default header values.

Forbidden.
*/
type PutRepositoriesRepoNameForbidden struct {
}

func (o *PutRepositoriesRepoNameForbidden) Error() string {
	return fmt.Sprintf("[PUT /repositories/{repo_name}][%d] putRepositoriesRepoNameForbidden ", 403)
}

func (o *PutRepositoriesRepoNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRepositoriesRepoNameNotFound creates a PutRepositoriesRepoNameNotFound with default headers values
func NewPutRepositoriesRepoNameNotFound() *PutRepositoriesRepoNameNotFound {
	return &PutRepositoriesRepoNameNotFound{}
}

/*PutRepositoriesRepoNameNotFound handles this case with default header values.

Repository not found.
*/
type PutRepositoriesRepoNameNotFound struct {
}

func (o *PutRepositoriesRepoNameNotFound) Error() string {
	return fmt.Sprintf("[PUT /repositories/{repo_name}][%d] putRepositoriesRepoNameNotFound ", 404)
}

func (o *PutRepositoriesRepoNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
