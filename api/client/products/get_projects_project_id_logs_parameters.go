// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetProjectsProjectIDLogsParams creates a new GetProjectsProjectIDLogsParams object
// with the default values initialized.
func NewGetProjectsProjectIDLogsParams() *GetProjectsProjectIDLogsParams {
	var ()
	return &GetProjectsProjectIDLogsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetProjectsProjectIDLogsParamsWithTimeout creates a new GetProjectsProjectIDLogsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetProjectsProjectIDLogsParamsWithTimeout(timeout time.Duration) *GetProjectsProjectIDLogsParams {
	var ()
	return &GetProjectsProjectIDLogsParams{

		timeout: timeout,
	}
}

// NewGetProjectsProjectIDLogsParamsWithContext creates a new GetProjectsProjectIDLogsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetProjectsProjectIDLogsParamsWithContext(ctx context.Context) *GetProjectsProjectIDLogsParams {
	var ()
	return &GetProjectsProjectIDLogsParams{

		Context: ctx,
	}
}

// NewGetProjectsProjectIDLogsParamsWithHTTPClient creates a new GetProjectsProjectIDLogsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetProjectsProjectIDLogsParamsWithHTTPClient(client *http.Client) *GetProjectsProjectIDLogsParams {
	var ()
	return &GetProjectsProjectIDLogsParams{
		HTTPClient: client,
	}
}

/*GetProjectsProjectIDLogsParams contains all the parameters to send to the API endpoint
for the get projects project ID logs operation typically these are written to a http.Request
*/
type GetProjectsProjectIDLogsParams struct {

	/*BeginTimestamp
	  The begin timestamp

	*/
	BeginTimestamp *string
	/*EndTimestamp
	  The end timestamp

	*/
	EndTimestamp *string
	/*Operation
	  The operation

	*/
	Operation *string
	/*Page
	  The page number, default is 1.

	*/
	Page *int32
	/*PageSize
	  The size of per page, default is 10, maximum is 100.

	*/
	PageSize *int32
	/*ProjectID
	  Relevant project ID

	*/
	ProjectID int64
	/*Repository
	  The name of repository

	*/
	Repository *string
	/*Tag
	  The name of tag

	*/
	Tag *string
	/*Username
	  Username of the operator.

	*/
	Username *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get projects project ID logs params
func (o *GetProjectsProjectIDLogsParams) WithTimeout(timeout time.Duration) *GetProjectsProjectIDLogsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get projects project ID logs params
func (o *GetProjectsProjectIDLogsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get projects project ID logs params
func (o *GetProjectsProjectIDLogsParams) WithContext(ctx context.Context) *GetProjectsProjectIDLogsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get projects project ID logs params
func (o *GetProjectsProjectIDLogsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get projects project ID logs params
func (o *GetProjectsProjectIDLogsParams) WithHTTPClient(client *http.Client) *GetProjectsProjectIDLogsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get projects project ID logs params
func (o *GetProjectsProjectIDLogsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBeginTimestamp adds the beginTimestamp to the get projects project ID logs params
func (o *GetProjectsProjectIDLogsParams) WithBeginTimestamp(beginTimestamp *string) *GetProjectsProjectIDLogsParams {
	o.SetBeginTimestamp(beginTimestamp)
	return o
}

// SetBeginTimestamp adds the beginTimestamp to the get projects project ID logs params
func (o *GetProjectsProjectIDLogsParams) SetBeginTimestamp(beginTimestamp *string) {
	o.BeginTimestamp = beginTimestamp
}

// WithEndTimestamp adds the endTimestamp to the get projects project ID logs params
func (o *GetProjectsProjectIDLogsParams) WithEndTimestamp(endTimestamp *string) *GetProjectsProjectIDLogsParams {
	o.SetEndTimestamp(endTimestamp)
	return o
}

// SetEndTimestamp adds the endTimestamp to the get projects project ID logs params
func (o *GetProjectsProjectIDLogsParams) SetEndTimestamp(endTimestamp *string) {
	o.EndTimestamp = endTimestamp
}

// WithOperation adds the operation to the get projects project ID logs params
func (o *GetProjectsProjectIDLogsParams) WithOperation(operation *string) *GetProjectsProjectIDLogsParams {
	o.SetOperation(operation)
	return o
}

// SetOperation adds the operation to the get projects project ID logs params
func (o *GetProjectsProjectIDLogsParams) SetOperation(operation *string) {
	o.Operation = operation
}

// WithPage adds the page to the get projects project ID logs params
func (o *GetProjectsProjectIDLogsParams) WithPage(page *int32) *GetProjectsProjectIDLogsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get projects project ID logs params
func (o *GetProjectsProjectIDLogsParams) SetPage(page *int32) {
	o.Page = page
}

// WithPageSize adds the pageSize to the get projects project ID logs params
func (o *GetProjectsProjectIDLogsParams) WithPageSize(pageSize *int32) *GetProjectsProjectIDLogsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get projects project ID logs params
func (o *GetProjectsProjectIDLogsParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithProjectID adds the projectID to the get projects project ID logs params
func (o *GetProjectsProjectIDLogsParams) WithProjectID(projectID int64) *GetProjectsProjectIDLogsParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the get projects project ID logs params
func (o *GetProjectsProjectIDLogsParams) SetProjectID(projectID int64) {
	o.ProjectID = projectID
}

// WithRepository adds the repository to the get projects project ID logs params
func (o *GetProjectsProjectIDLogsParams) WithRepository(repository *string) *GetProjectsProjectIDLogsParams {
	o.SetRepository(repository)
	return o
}

// SetRepository adds the repository to the get projects project ID logs params
func (o *GetProjectsProjectIDLogsParams) SetRepository(repository *string) {
	o.Repository = repository
}

// WithTag adds the tag to the get projects project ID logs params
func (o *GetProjectsProjectIDLogsParams) WithTag(tag *string) *GetProjectsProjectIDLogsParams {
	o.SetTag(tag)
	return o
}

// SetTag adds the tag to the get projects project ID logs params
func (o *GetProjectsProjectIDLogsParams) SetTag(tag *string) {
	o.Tag = tag
}

// WithUsername adds the username to the get projects project ID logs params
func (o *GetProjectsProjectIDLogsParams) WithUsername(username *string) *GetProjectsProjectIDLogsParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the get projects project ID logs params
func (o *GetProjectsProjectIDLogsParams) SetUsername(username *string) {
	o.Username = username
}

// WriteToRequest writes these params to a swagger request
func (o *GetProjectsProjectIDLogsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BeginTimestamp != nil {

		// query param begin_timestamp
		var qrBeginTimestamp string
		if o.BeginTimestamp != nil {
			qrBeginTimestamp = *o.BeginTimestamp
		}
		qBeginTimestamp := qrBeginTimestamp
		if qBeginTimestamp != "" {
			if err := r.SetQueryParam("begin_timestamp", qBeginTimestamp); err != nil {
				return err
			}
		}

	}

	if o.EndTimestamp != nil {

		// query param end_timestamp
		var qrEndTimestamp string
		if o.EndTimestamp != nil {
			qrEndTimestamp = *o.EndTimestamp
		}
		qEndTimestamp := qrEndTimestamp
		if qEndTimestamp != "" {
			if err := r.SetQueryParam("end_timestamp", qEndTimestamp); err != nil {
				return err
			}
		}

	}

	if o.Operation != nil {

		// query param operation
		var qrOperation string
		if o.Operation != nil {
			qrOperation = *o.Operation
		}
		qOperation := qrOperation
		if qOperation != "" {
			if err := r.SetQueryParam("operation", qOperation); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int32
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}

	}

	// path param project_id
	if err := r.SetPathParam("project_id", swag.FormatInt64(o.ProjectID)); err != nil {
		return err
	}

	if o.Repository != nil {

		// query param repository
		var qrRepository string
		if o.Repository != nil {
			qrRepository = *o.Repository
		}
		qRepository := qrRepository
		if qRepository != "" {
			if err := r.SetQueryParam("repository", qRepository); err != nil {
				return err
			}
		}

	}

	if o.Tag != nil {

		// query param tag
		var qrTag string
		if o.Tag != nil {
			qrTag = *o.Tag
		}
		qTag := qrTag
		if qTag != "" {
			if err := r.SetQueryParam("tag", qTag); err != nil {
				return err
			}
		}

	}

	if o.Username != nil {

		// query param username
		var qrUsername string
		if o.Username != nil {
			qrUsername = *o.Username
		}
		qUsername := qrUsername
		if qUsername != "" {
			if err := r.SetQueryParam("username", qUsername); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
